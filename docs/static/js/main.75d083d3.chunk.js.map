{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifts","console","log","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"mMAyBeA,EAtBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAWzC,OACE,sBAAMC,SANa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,QAG1C,SACE,uBAAOC,KAAK,OAAOC,MAAOT,EAAYU,SAXhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCYZG,EAlBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,0DACiDC,UAC7DH,GAFY,sDAIKI,MAAMF,GAJX,cAIRG,EAJQ,gBAKSA,EAAKC,OALd,uBAKNC,EALM,EAKNA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXxB,kBAePM,GAfO,4CAAH,sDCWEO,EATK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChC,OACE,sBAAKc,UAAU,6CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCeKO,EAjBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDL,SAACA,GAAc,IAAD,EACfd,mBAAS,CAAEqB,KAAM,GAAIa,SAAS,IADf,mBAClCC,EADkC,KAC3BC,EAD2B,KAYzC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACd,GACtBY,EAAS,CACPf,KAAMG,EACNU,SAAS,SAGZ,CAACpB,IAEGqB,EDV2BI,CAAczB,GAAlCa,EADkB,EACxBN,KAAca,EADU,EACVA,QAGtB,OAFAM,QAAQC,IAAIP,GAGV,qCACE,6BAAKpB,IACJoB,GAAW,cACZ,qBAAKJ,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEQjBiB,EAlBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,UADrB,mBAClB2C,EADkB,KACN5C,EADM,KAGzB,OACE,qCACE,8CAEA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACG4C,EAAWpB,KAAI,SAACqB,GAAD,OACd,cAAC,EAAD,CAAmB9B,SAAU8B,GAAfA,YCVxBC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.75d083d3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 0)\n      setCategories((cats) => [inputValue, ...cats]);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(\n    category\n  )}&api_key=1uIQddKUnBUYO0Sryi7gUjW9GYmJ5EvY`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n\nexport default getGifs;\n","import React from \"react\";\n\nconst GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__rubberBand\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from \"react\";\nimport { useFetchGifts } from \"../hooks/useFetchGifts\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifts(category);\n  console.log(loading);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && \"Cargando...\"}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\nimport getGifs from \"../helpers/getGifs\";\n\nexport const useFetchGifts = (category) => {\n  const [state, setState] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    getGifs(category).then((img) => {\n      setState({\n        data: img,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./Components/AddCategory\";\nimport GifGrid from \"./Components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"feliz\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n\n      <hr />\n      <AddCategory setCategories={setCategories} />\n      <ol>\n        {categories.map((cat) => (\n          <GifGrid key={cat} category={cat} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}